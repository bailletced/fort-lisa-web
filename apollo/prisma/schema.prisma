generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId  String @id @default(uuid()) @map("user_id")
  email   String @unique
  name    String?
  hashedPassword    String? @map("hashed_password")
  salt    String?
  isActive Boolean @default(false) @map("is_active")
  lastConnectionDate DateTime? @map("last_connection_date")
  permissionSetId String? @map("permission_set_id") @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  accounts      Account[]
  userSessionSubscriptions      UserSessionSubscription[]

  permissionSet PermissionSet? @relation(fields: [permissionSetId], references: [permissionSetId])

  @@index([userId])
  @@map("users")
}

model Account {
  accountId          String  @id @default(cuid()) @map("account_id")
  userId             String  @map("user_id")
  provider           EAccountProvider
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
enum EAccountProvider {
  FACEBOOK
  GOOGLE
  PASSWORD
}

model Session {
  sessionId    String   @id @default(cuid()) @map("sid")
  sess         Json   @unique
  expire       DateTime @db.Timestamptz(6)
  
  @@map("sessions")
}

model UserSessionSubscription {
  userSessionSubscriptionId String   @id @default(cuid()) @map("user_session_subscription_id")
  userId       String   @map("user_id")
  sessId    String?   @map("sess_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@index([userSessionSubscriptionId])
  @@map("user_session_subscriptions")
}
model Role {
  roleId String @id @default(uuid()) @map("role_id")
  name String
  description String?
  feature String @default("")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  permissionSetRoleSubscriptions PermissionSetRoleSubscription[]
  @@index([roleId])
  @@map("roles")
}

model PermissionSet {
  permissionSetId String @id @default(uuid()) @map("permission_set_id")
  name String
  description String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  permissionSetRoleSubscriptions PermissionSetRoleSubscription[]
  user User?

  @@index([permissionSetId])
  @@map("permission_sets")
}

model PermissionSetRoleSubscription {
  permissionSetRoleSubscriptionId String @id @default(uuid()) @map("permission_set_role_subscription_id")
  permissionSetId String @map("permission_set_id")
  roleId String @map("role_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  permissionSet PermissionSet @relation(fields: [permissionSetId], references: [permissionSetId], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  @@index([permissionSetRoleSubscriptionId])
  @@map("permission_set_role_subscriptions")
}

model OperationStore {
  operationId String @id @default(uuid()) @map("operation_id")
  query String
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([operationId])
  @@map("operation_stores")
}